"""
작성일: 2020-08-28
==============================================================================
문제 위치: 교재 217p
==============================================================================
소요 시간: 25분
"""

x = int(input())

d = [0] * (x + 1)

for i in range(2, x + 1):
    d[i] = d[i - 1] + 1

    if (i % 5 == 0) and (i >= 5):
        d[i] = min(d[i], d[i // 5] + 1)

    if (i % 3 == 0) and (i >= 3):
        d[i] = min(d[i], d[i // 3] + 1)
    
    if (i % 2 == 0) and (i >= 2):
        d[i] = min(d[i], d[i // 2] + 1)


print(d[x])
            

"""
접근법: 앞에서 배운 다이나믹 프로그래밍 기법을 사용했다.
1. 먼저 x가 입력되면 0~x까지의 계산 결과를 저장하기 위해 x+1크기의 배열을 만든다.
2. 0은 무시하고 1은 0 고정이니 2부터 x까지 반복문을 돌린다. (for i in range(2, x + 1)를 통해 2~x까지 돌린다.)
3. 먼저 계산 횟수를 1회 더한다. (이전 숫자에 1을 더한다. 왜냐하면 나누어 떨어지지 않으면 1을 빼니까)
4. 나누어 떨어지는 경우 현재의 계산 횟수(d[i])와 한번 나눈 값에 지금 계산횟수를 더한 횟수(d[i // n] + 1)중에 작은 것을 저장한다.
5. x에 해당하는 계산횟수를 뽑아 출력한다.
==============================================================================
개선점: 
"""